#
# StreamDevice protocol for the I404.
#
# A full command from the host to the I404 comprises as many characters
# as needed to form the message, terminated by a LF character.
# The LF is required for the I404 to commence processing.
#
# The I404 generates a reply to every message from the host when it is
# the listener. First the I404 echos the command as sent icluding the LF.
# Following that the first character is ACK (0x6) when the command has
# been successfully executed without error. Responses to commands with
# a "?" will the have required data, terminated by CR, LF. If no data
# is required nothing will be transmitted after the ACK. If the I404
# generates an error then it transmits a BELL (0x7) instead of the ACK.
#
InTerminator = CR LF;
OutTerminator = LF;
replytimeout = 1000;
readtimeout  = 1000;
locktimeout = 1000;
#
# State commands
#
# Save current state in EEPROM
save {out "*SAV"; in "*SAV%*5c";}
# Recall state from EEPROM
recall {out "*RCL"; in "*RCL%*5c";}
# Return I404 to default conditions
reset {out "*RST"; in "*RST%*5c";}
# Clear I404 event registers and error queue
clear {out "*CLS"; in "*CLS\10\06";}
#
# Initiate readings on valid trigger
#
init {out "INIT"; in "INIT%*5c";}
#
# I404 Calibration
#
# Initiate calibration
doCalib {out "CALIB:GAI"; in "CALIB:GAI%*5c";}
# Save calibration
saveCalib {out "CALIB:SAV"; in "CALIB:SAV*5c";}
# Recall calibration (needed after reset)
recallCalib { out "CALIB:RCL"; in "CALIB:RCL%*5c";}
# Query calibration gains
getCalib {
  out "CALIB:GAIN?";
  
  extraInput=Ignore;
  in "CALIB:GAIN?%*1c%d";
  InTerminator= CR LF;
}


#
# Set/Query capacitor, by default 0 = 100pF and 1 = 3300pF
#
setCap {out "CONF:CAP %{0|1}"; in "CONF:CAP %d\10\06";}
getCap {out "CONF:CAP?"; in "CONF:CAP?\10\06%*d,%(\$1.VAL)e F"; InTerminator = CR LF;}
#
# Set/Query Maximum External High Voltage in Volts (Password Protected)
#
setHVM {out "CONF:HIVO:MAX %d"; in "CONF:HIVO:MAX %d\10\06";}
getHVM {out "CONF:HIVO:MAX?"; in "CONF:HIVO:MAX?\10\06%d"; InTerminator = CR LF;}
#
# Set/Query External High Voltage in Volts
#
setHV {out "CONF:HIVO:SET %d"; in "CONF:HIVO:SET %d\10\06";}
# Don't use InTerminator on GetHV, causes failure during init handler for checkHV
getHV {out "CONF:HIVO:SET?"; in "CONF:HIVO:SET?\10\06%d"; InTerminator = CR LF;}
#getHV {out "CONF:HIVO:SET?"; in "CONF:HIVO:SET?%*1c%d";}
checkHV {out "CONF:HIVO:SET %d"; in "CONF:HIVO:SET %*d\10%{\7|\6}"; @init { getHV; }}
checkHVR {out "CONF:HIVO:SET?"; in "CONF:HIVO:SET?\10%{\7|\6}"; ExtraInput = IGNORE;}
#
# Query the last measured current data in amps. Sample currents and overflow 
# bits, ignore the timestamp.
#
#getCs {out "READ:CURR?"; in "READ:CURR?\nOK\n%*e S,%e A,%*s"; InTerminator = CR LF;}
getCs {out "READ:CURR?"; in "READ:CURR?\10\06%*e S,%e A,%(\$1\$2.VAL)e A,%(\$1\$3.VAL)e A,%(\$1\$4.VAL)e A,%(\$1\$5.VAL)d"; InTerminator = CR LF;}
#
# Query the beam position
#
getPos {out "READ:POS?"; in "READ:POS?\10\06%f,%(\$1.VAL)f"; InTerminator = CR LF;}
#
# Set/Query Current Compensation Factors
#
setKs {out "CALIB:GAIN %(A).2f %(B).2f %(C).2f %(D).2f";in "CALIB:COMP %*f %*f %*f %*f\10\06";}
getKs {out "CALIB:GAIN?"; in "CALIB:GAIN?\10\06%*d,%e,%(\$1\$2.VAL)e,%(\$1\$3.VAL)e,%(\$1\$4.VAL)e"; InTerminator = CR LF; extraInput=Ignore;}
#
# Set/Query current Range
#
setRange {out "CONF:RANGE %e"; in "CONF:RANGE %e\10{\06|\07}";}
getRange {out "CONF:RANGE?"; in "CONF:RANGE?\10\06%e A"; InTerminator = CR LF;}
#
# Set/Query Position Function; 1 = None, 2 = Quadrant, 3 = Split Mode
#
setMode {out "CONF:MON %d"; in "CONF:MON %d\10{\06|\07}";}
getMode {out "CONF:MON?"; in "CONF:MON?\10\06%d"; InTerminator = CR LF;}
#
# Get Error Message, returns a quoted string.
#
getErr {out "SYST:ERR?"; in "SYST:ERR?\10\06%*d,\34%[^,\34]\34"; InTerminator = CR LF;}

#
# Set/Query Current-to-Frequency Mapping
#
setFreq {out "CONF:FREQ %d"; in "CONF:FREQ %d\10{\06|\07}";}
getFreq {out "CONF:FREQ?"; in "CONF:FREQ?\10\06%d"; InTerminator = CR LF;}

#
# Set/Query Integration Period [seconds]
#
setPeriod {out "CONF:PER %e"; in "CONF:PER %e\10\06";}
getPeriod {out "CONF:PER?"; in "CONF:PER?\10\06%e S"; InTerminator = CR LF;}

#
# Set/Query Resolution (# of bits in [16-20])
#
getRes {out "CONF:RES?"; in "CONF:RES?\10\06%d"; InTerminator = CR LF;}
setRes {out "CONF:RES %d"; in "CONF:RES %d\10\06";}

#
# Set/Query Suppression Frequency [Hz]
#
getSuppressFreq {out "SYST:FREQ?"; in "SYST:FREQ?\10\06%f"; InTerminator = CR LF;}
setSuppressFreq {out "SYST:FREQ %d"; in "SYST:FREQ %f\10\06";}

#
# Query Identification string (*IDN)
#
getId {out "*IDN?"; in "*IDN?%*1c%[a-zA-Z0-9\ \.\,\-\/]"; InTerminator = CR LF;}
 
#
# Set/Query Admin password (unlocks certain functionality)
#
getPassword {out "SYST:PASS?"; in "SYST:PASS?\10\06%s"; InTerminator = CR LF;}
setPassword {out "SYST:PASS %s"; 
		in "SYST:PASS\10%s\10\06";
		extraInput=Ignore;
		InTerminator = CR LF;}


